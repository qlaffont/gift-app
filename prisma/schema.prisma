generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator fieldEncryptionMigrations {
  provider = "prisma-field-encryption"
  output   = "migrations"
}

enum Language {
  EN
  FR
}

model User {
  id String @id @default(uuid())

  email       String @unique /// @encrypted
  emailHash       String? @unique /// @encryption:hash(email)
  name        String @db.LongText /// @encrypted
  description String? @db.LongText /// @encrypted

  discordUserId String? @unique /// @encrypted
  discordUserIdHash       String? @unique /// @encryption:hash(discordUserId)
  googleUserId  String? @unique /// @encrypted
  googleUserIdHash       String? @unique /// @encryption:hash(googleUserId)

  lang Language @default(EN)

  tokens               Token[]
  giftLists            GiftList[]
  giftsTaken           Gift[]
  giftListUserAccesses GiftListUserAccess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id           String @id @default(uuid())
  refreshToken String
  accessToken  String

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  createdAt DateTime @default(now())

  @@index([ownerId])
}

enum GiftListAccess {
  PASSWORD_PROTECTED
  EMAIL
  PUBLIC
}

model GiftList {
  id String @id @default(uuid())

  name           String @db.LongText
  description    String? @db.LongText
  resetTakenWhen DateTime?
  access         GiftListAccess
  password       String? @db.LongText

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  gifts                Gift[]
  giftListUserAccesses GiftListUserAccess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model GiftListUserAccess {
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  giftList   GiftList @relation(fields: [giftListId], references: [id])
  giftListId String

  @@unique([ownerId, giftListId])
  @@index([giftListId, ownerId])
}

model Gift {
  id String @id @default(uuid())

  name        String @db.LongText
  description String? @db.LongText
  link        String? @db.LongText
  coverUrl    String? @db.LongText

  takenBy   User?     @relation(fields: [takenById], references: [id])
  takenById String?
  takenWhen DateTime?
  priority Int @default(0)
  order Int @default(0)

  giftList   GiftList @relation(fields: [giftListId], references: [id])
  giftListId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([giftListId])
  @@index([takenById])
}
